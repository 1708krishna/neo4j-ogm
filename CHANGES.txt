2.0.0-SNAPSHOT
--------------
o Fixes issue where the number of entities returned in a page is incorrect if related entities of the same type are mapped
o Fixes issue where the result of loading relationship entities with a custom load depth was incorrect. Furthermore, default load depth 1 for a relationship entity will now correctly load it's start and end nodes to depth 1.
o Support for collections of entities of type SortedSet, backed by a TreeSet
o A missing type attribute on a @RelationshipEntity will now result in a compile time error
o Fixes issue where registering an entity type and purging entities from the session were dependent on the equals() implementation of the entity
o Fixes issue where literal maps returned in custom cypher queries could not be parsed
o Fixes issue where saving a collection of entities would save each entity in a separate request and transaction. After this fix, they will be saved in the same transaction, with as few requests as possible

2.0.0-M1
--------------
o Support mapping of custom query results to domain entities
o Upgrade to Neo4j 2.3.2
o Retry http requests in the event of NoHttpResponseException
o Converters using parametrized types now work correctly
o Fixes http-client connection leak when request returns a 300/400/500 response code
o Performance improvements when
  - creating, updating and deleting nodes
  - creating, updating and deleting relationships and relationship entities
o All create, update and delete Cypher queries are cacheable
o Detect use of wildcards on generics and fail with appropriate message
o Support for Neo4j Embedded
o Split into modules for drivers, api, core, compiler and test

1.1.5-SNAPSHOT
--------------
o Support for collections of entities of type SortedSet, backed by a TreeSet
o Upgrade to Neo4j 2.3.2
o Retry http requests in the event of NoHttpResponseException
o Converters using parametrized types now work correctly
o Fixes http-client connection leak when request returns a 300/400/500 response code

1.1.4
--------------
o Fixes issue where the relationship type specified via an annotation on an iterable setter was ignored if the parameter type matched
o Fixes issue where long transaction times out and results in application hanging
o Fixes issue where loadAll was dependent on the entities implementation of equals()
o Throw MissingOperatorException when BooleanOperators are not specified in any filters except the first
o Fixes an issue where LoadByIdsDelegate returned more than the collection of requested ids
o Allows saving a relationship entity directly even when there is no reference from the relationship entity to the start node
o Fixes issue where integers returned by queries were not converted correctly to numeric wrapper classes like Float
o Fixes issue where @DateLong could not handle dates with values < INTEGER.MAX_VALUE
o Fixes relationship mapping issue when one-sided singleton relationships are reloaded after session clear
o Added support for case-insensitive, wildcard-based LIKE queries via filters
o Fixes null pointer exceptions when nulls are sent as parameters and returned from custom queries

1.1.3
--------------
o Fixes issue when entity identity was based on equals/hashcode when traversing object graph
o Performance improvements when
  - updating existing relationships by id
  - creating new relationships between already persisted nodes. Does not apply to relationship entities.
o Fixes an issue with the mapping context where node entities are deregistered, but not referenced relationship entities
o Fixes issue when type descriptors are defined on interfaces
o Fixes metadata label resolution with certain class hierarchies

1.1.2
--------------
o Improvements to class loading mechanism to support Play framework
o Fixes mapping issue when an entity contains relationships as well as relationship entities of the same type
o Support for Neo4j 2.2.5

1.1.1
--------------
o Support for self relationships (loops)
o Fixes around mapping of relationships and relationship entities when the relationship type is the same
o Fixed NullPointerException thrown from TransientRelationship.convert
o Fixed relationships being lost upon re-save
o Performance improvements
o Deprecated Session.execute() in favour of Session.query() allowing both queries and modifying statements,
with the ability to return query results as well as query statistics.


1.1.0
---------
o Plain Object Graph Mapper
    - support for CRUD persistence of Node- and Relationship-Entities
    - new set of mapping annotations
    - configurable fetch and store - depth
    - fast class scanner for metadata
    - annotation free mapping
    - property conversion handling
o Label based type representation
o Query sorting and paging support
